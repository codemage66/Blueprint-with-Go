// Package {{.package}}
package {{.package}}

import (
	"fmt"
	"log"
	"net/http"

	"github.com/blue-jay/blueprint/lib/flash"
	"github.com/blue-jay/blueprint/lib/form"
	"github.com/blue-jay/blueprint/lib/router"
	"github.com/blue-jay/blueprint/lib/session"
	"github.com/blue-jay/blueprint/lib/view"
	"github.com/blue-jay/blueprint/middleware/acl"
	"github.com/blue-jay/blueprint/model/{{.model}}"
)

var (
	uri = "/{{.url}}"
)

// Load the routes.
func Load() {
	c := router.Chain(acl.DisallowAnon)
	router.Get(uri, Index, c...)
	router.Get(uri+"/create", Create, c...)
	router.Post(uri+"/create", Store, c...)
	router.Get(uri+"/view/:id", Show, c...)
	router.Get(uri+"/edit/:id", Edit, c...)
	router.Patch(uri+"/edit/:id", Update, c...)
	router.Delete(uri+"/:id", Destroy, c...)
}

// Index displays the items.
func Index(w http.ResponseWriter, r *http.Request) {
	sess := session.Instance(r)
	userID := fmt.Sprintf("%v", sess.Values["id"])

	items, err := {{.model}}.ByUserID(userID)
	if err != nil {
		log.Println(err)
		sess.AddFlash(flash.Info{"An error occurred on the server. Please try again later.", flash.Error})
		sess.Save(r, w)
		items = []{{.model}}.Item{}
	}

	v := view.New("{{.view}}/index")
	v.Vars["items"] = items
	v.Render(w, r)
}

// Create displays the create form.
func Create(w http.ResponseWriter, r *http.Request) {
	v := view.New("{{.view}}/create")
	form.Repopulate(r.Form, v.Vars, "name")
	v.Render(w, r)
}

// Store handles the create form submission.
func Store(w http.ResponseWriter, r *http.Request) {
	sess := session.Instance(r)
	userID := fmt.Sprintf("%v", sess.Values["id"])

	if valid, missingField := form.Required(r, "name"); !valid {
		sess.AddFlash(flash.Info{"Field missing: " + missingField, flash.Warning})
		sess.Save(r, w)
		Create(w, r)
		return
	}

	_, err := {{.model}}.Create(r.FormValue("name"), userID)
	if err != nil {
		log.Println(err)
		sess.AddFlash(flash.Info{"An error occurred on the server. Please try again later.", flash.Error})
		sess.Save(r, w)
		Create(w, r)
		return
	}

	sess.AddFlash(flash.Info{"Item added.", flash.Success})
	sess.Save(r, w)
	http.Redirect(w, r, uri, http.StatusFound)
}

// Show displays a single item.
func Show(w http.ResponseWriter, r *http.Request) {
	sess := session.Instance(r)
	userID := fmt.Sprintf("%v", sess.Values["id"])
	params := router.Params(r)

	item, err := {{.model}}.ByID(params.ByName("id"), userID)
	if err != nil {
		log.Println(err)
		sess.AddFlash(flash.Info{"An error occurred on the server. Please try again later.", flash.Error})
		sess.Save(r, w)
		http.Redirect(w, r, uri, http.StatusFound)
		return
	}

	v := view.New("{{.view}}/show")
	v.Vars["item"] = item
	v.Render(w, r)
}

// Edit displays the edit form.
func Edit(w http.ResponseWriter, r *http.Request) {
	sess := session.Instance(r)
	userID := fmt.Sprintf("%v", sess.Values["id"])
	params := router.Params(r)

	item, err := {{.model}}.ByID(params.ByName("id"), userID)
	if err != nil {
		log.Println(err)
		sess.AddFlash(flash.Info{"An error occurred on the server. Please try again later.", flash.Error})
		sess.Save(r, w)
		http.Redirect(w, r, uri, http.StatusFound)
		return
	}

	v := view.New("{{.view}}/edit")
	v.Vars["item"] = item
	v.Render(w, r)
}

// Update handles the edit form submission.
func Update(w http.ResponseWriter, r *http.Request) {
	sess := session.Instance(r)
	userID := fmt.Sprintf("%v", sess.Values["id"])
	params := router.Params(r)

	if validate, missingField := form.Required(r, "name"); !validate {
		sess.AddFlash(flash.Info{"Field missing: " + missingField, flash.Warning})
		sess.Save(r, w)
		Edit(w, r)
		return
	}

	_, err := {{.model}}.Update(r.FormValue("name"), params.ByName("id"), userID)
	if err != nil {
		log.Println(err)
		sess.AddFlash(flash.Info{"An error occurred on the server. Please try again later.", flash.Error})
		sess.Save(r, w)
		Edit(w, r)
		return
	}

	sess.AddFlash(flash.Info{"Item updated.", flash.Success})
	sess.Save(r, w)
	http.Redirect(w, r, uri, http.StatusFound)
}

// Destroy handles the delete form submission.
func Destroy(w http.ResponseWriter, r *http.Request) {
	sess := session.Instance(r)
	userID := fmt.Sprintf("%v", sess.Values["id"])
	params := router.Params(r)

	_, err := {{.model}}.Delete(params.ByName("id"), userID)
	if err != nil {
		log.Println(err)
		sess.AddFlash(flash.Info{"An error occurred on the server. Please try again later.", flash.Error})
		sess.Save(r, w)
	} else {
		sess.AddFlash(flash.Info{"Item deleted.", flash.Notice})
		sess.Save(r, w)
	}

	http.Redirect(w, r, uri, http.StatusFound)
}
