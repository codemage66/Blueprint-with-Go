// Package {{.package}}
package {{.package}}

import (
	"database/sql"
	"log"

	"github.com/blue-jay/blueprint/model"
	database "github.com/blue-jay/core/storage/driver/mysql"

	"github.com/go-sql-driver/mysql"
	"github.com/jmoiron/sqlx"
)

var (
	// table is the table name.
	table = "{{.table}}"
)

// Item defines the model.
type Item struct {
	ID        uint32         `db:"id"`
	Name      string         `db:"name"`
	UserID    uint32         `db:"user_id"`
	CreatedAt mysql.NullTime `db:"created_at"`
	UpdatedAt mysql.NullTime `db:"updated_at"`
	DeletedAt mysql.NullTime `db:"deleted_at"`
}

// Connection defines the shared database interface.
type Connection struct {
	db *sqlx.DB
}

// Shared returns the global connection information.
func Shared() Connection {
	return Connection{
		db: database.SQL,
	}
}

// ByID gets item by ID.
func (c Connection) ByID(ID string, userID string) (Item, error) {
	var result Item
	var err error
	log.Println("Not Implemented")
	return result, model.StandardError(err)
}

// ByUserID gets all items for a user.
func (c Connection) ByUserID(userID string) ([]Item, error) {
	var result []Item
	var err error
	log.Println("Not Implemented")
	return result, model.StandardError(err)
}

// Create adds an item.
func (c Connection) Create(name string, userID string) (sql.Result, error) {
	var result sql.Result
	var err error
	log.Println("Not Implemented")
	return result, model.StandardError(err)
}

// Update makes changes to an existing item.
func (c Connection) Update(name string, ID string, userID string) (sql.Result, error) {
	var result sql.Result
	var err error
	log.Println("Not Implemented")
	return result, model.StandardError(err)
}

// DeleteHard removes an item.
func (c Connection) DeleteHard(ID string, userID string) (sql.Result, error) {
	var result sql.Result
	var err error
	log.Println("Not Implemented")
	return result, model.StandardError(err)
}

// DeleteSoft marks an item as removed.
func (c Connection) DeleteSoft(ID string, userID string) (sql.Result, error) {
	var result sql.Result
	var err error
	log.Println("Not Implemented")
	return result, model.StandardError(err)
}
